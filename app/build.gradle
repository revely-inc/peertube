apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "androidx.navigation.safeargs.kotlin"

apply plugin: 'io.sentry.android.gradle'

// Try reading secrets from file
def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretProperties = new Properties()
if (secretsPropertiesFile.exists()) {
    secretProperties.load(new FileInputStream(secretsPropertiesFile))
}
// Otherwise read from environment variables, this happens in CI
else {
    secretProperties.setProperty("oauth_client_id", "\"${System.getenv('oauth_client_id')}\"")
    secretProperties.setProperty("oauth_client_secret", "\"${System.getenv('oauth_client_secret')}\"")
    secretProperties.setProperty("oauth_redirect_uri", "\"${System.getenv('oauth_redirect_uri')}\"")
    secretProperties.setProperty("google_project_id", "\"${System.getenv('google_project_id') ?: "null"}\"")
    secretProperties.setProperty("signing_keystore_password", "${System.getenv('signing_keystore_password')}")
    secretProperties.setProperty("signing_key_password", "${System.getenv('signing_key_password')}")
    secretProperties.setProperty("signing_key_alias", "${System.getenv('signing_key_alias')}")
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "co.revely.peertube"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode Integer.valueOf(System.env.VERSION_CODE ?: 1)
        // Manually bump the semver version part of the string as necessary
        versionName "1.0.0-${System.env.VERSION_SHA}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "oauth_client_id", "${secretProperties['oauth_client_id']}")
        buildConfigField("String", "oauth_client_secret", "${secretProperties['oauth_client_secret']}")
        buildConfigField("String", "oauth_redirect_uri", "${secretProperties['oauth_redirect_uri']}")
        buildConfigField("String", "google_project_id", "${secretProperties['google_project_id']}" ?: "null")
    }
//    buildFeatures {
//        compose true
//    }
    signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file("../keys/android-signing-keystore.jks")
            storePassword "${secretProperties['signing_keystore_password']}"
            keyAlias "${secretProperties['signing_key_alias']}"
            keyPassword "${secretProperties['signing_key_password']}"
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0-beta01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.0-rc01'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.0-rc01'
    implementation 'androidx.room:room-runtime:2.2.1'
    implementation 'androidx.room:room-ktx:2.2.1'
    kapt 'androidx.room:room-compiler:2.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.1.0'
    implementation 'androidx.paging:paging-runtime-ktx:2.1.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0-rc01'

//    kotlinPlugin "androidx.compose:compose-compiler:0.1.0-dev02"
//    // You also need to include the following Compose toolkit dependencies.
//    implementation 'androidx.ui:ui-framework:0.1.0-dev02'
//    implementation 'androidx.ui:ui-tooling:0.1.0-dev02'
//    implementation 'androidx.ui:ui-layout:0.1.0-dev02'
//    implementation 'androidx.ui:ui-material:0.1.0-dev02'
//    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'com.google.android.material:material:1.2.0-alpha01'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'

    implementation 'org.koin:koin-androidx-scope:2.0.1'
    implementation 'org.koin:koin-androidx-viewmodel:2.0.1'
    implementation 'org.koin:koin-androidx-ext:2.0.1'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.github.bumptech.glide:glide:4.10.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'

    implementation 'com.google.android.exoplayer:exoplayer:2.10.5'

//    implementation "com.github.TorrentStream:TorrentStream-Android:2.6.1"

    implementation 'org.jetbrains.anko:anko-commons:0.10.8'

    implementation 'io.sentry:sentry-android:1.7.27'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
}
